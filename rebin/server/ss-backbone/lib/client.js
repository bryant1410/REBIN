// Generated by CoffeeScript 1.3.3
var registerCollection, registerModel;

registerModel = function(model, modelname, id) {
  var modelID, modelRef;
  if (id == null) {
    id = void 0;
  }
  modelID = id || model.cid;
  modelRef = model;
  if (!(ss.event.listeners("sync:" + modelname + ":" + modelID).length > 0)) {
    console.log("registering model");
    return ss.event.on("sync:" + modelname + ":" + modelID, function(msg) {
      return modelRef.trigger("backbone-sync-model", JSON.parse(msg));
    });
  }
};

registerCollection = function(collection, modelname) {
  var collectionRef;
  collectionRef = collection;
  console.log("registering collection");
  return ss.event.on("sync:" + modelname, function(msg) {
    return collectionRef.trigger("backbone-sync-collection", JSON.parse(msg));
  });
};

window.syncedModel = Backbone.Model.extend({
  sync: function(method, model, options) {
    var modelname, req;
    modelname = this.constructor.modelname;
    req = {
      modelname: modelname,
      method: method,
      model: model.toJSON()
    };
    if (model.isNew()) {
      req.cid = model.cid;
    }
    return ss.backbone(req);
  },
  initialize: function(attrs) {
    var deleted, model, modelname;
    modelname = this.constructor.modelname;
    if (!modelname) {
      throw "Cannot sync. You must set the name of the modelname on the Model class";
      delete this;
    }
    model = this;
    registerModel(model, modelname, attrs.id || model.cid);
    deleted = false;
    return this.on("backbone-sync-model", function(res) {
      console.log("Model triggered");
      if (res.e) {
        return console.log(res.e);
      } else {
        if (res.method === "confirm") {
          registerModel(model, modelname, res.model.id);
          this.set(res.model);
        }
        if (res.method === "update") {
          this.set(res.model);
        }
        if (res.method === "delete") {
          if (!deleted) {
            this.trigger("destroy");
          }
          if (this.collection) {
            this.collection.remove(this.id);
          }
          return deleted = true;
        }
      }
    });
  }
});

window.syncedCollection = Backbone.Collection.extend({
  sync: function(method, model, options) {
    var modelname, req;
    modelname = this.constructor.modelname;
    console.log("Collection sync");
    req = {
      modelname: modelname,
      method: method,
      model: model.toJSON()
    };
    return ss.backbone(req);
  },
  initialize: function() {
    var collection, modelname;
    modelname = this.constructor.modelname;
    if (!modelname) {
      throw "Cannot sync. You must set the name of the modelname on the Collection class";
      return delete this;
    } else {
      collection = this;
      registerCollection(collection, modelname);
      return this.on("backbone-sync-collection", function(msg) {
        console.log("collection triggered");
        if (msg.method === "create") {
          this.add(msg.model);
        }
        if (msg.method === "read") {
          return this.add(msg.models);
        }
      });
    }
  }
});
